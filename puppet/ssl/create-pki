#!/usr/bin/env bash
#
# For PKI infrastructure information, just read the doc:
# http://pki-tutorial.readthedocs.org/en/latest/index.html
#
# This script creates a root CA and a sub-CA.
# You just have to add the root CA to JKS, allowing
# to get multiple sub-CA, revoke them whenever you want/need.

## Check if we have the configuration files
error=0;
for i in root client dir mrc osd; do
  if [ ! -f etc/${i}-ca.conf ]; then
    error=1;
    echo "Missing SSL configuration file: etc/${i}-ca.conf"
  fi
done

if [ $error -ne 0 ]; then
  exit 1;
fi

# Ensure rights are correct on private directories
mkdir -p ca/root-ca/{private,db} crl certs
chmod 0700 ca/root-ca/private

# Create databases
> ca/root-ca/db/root-ca.db
> ca/root-ca/db/root-ca.db.attr

echo 01 > ca/root-ca/db/root-ca.crt.srl
echo 01 > ca/root-ca/db/root-ca.crl.srl

echo Create Root CA
openssl req -new \
  -config etc/root-ca.conf \
  -out ca/root-ca.csr \
  -keyout ca/root-ca/private/root-ca.key

echo Sign it
openssl ca -selfsign \
  -config etc/root-ca.conf \
  -in ca/root-ca.csr \
  -out ca/root-ca.crt \
  -extensions root_ca_ext \
  -days 18250 # more or less 50 years

echo Create CRL
openssl ca -gencrl \
  -config etc/root-ca.conf \
  -out crl/root-ca.crl


# Create sub-ca in order to manage right accesses
for i in client dir mrc osd; do

  mkdir -p ca/${i}-ca/{private,db}
  chmod 0700 ca/${i}-ca/private

  > ca/${i}-ca/db/${i}-ca.db
  > ca/${i}-ca/db/${i}-ca.db.attr

  echo 01 > ca/${i}-ca/db/${i}-ca.crt.srl
  echo 01 > ca/${i}-ca/db/${i}-ca.crl.srl

  echo Create ${i}-CA
  openssl req -new \
    -config etc/${i}-ca.conf \
    -out ca/${i}-ca.csr \
    -keyout ca/${i}-ca/private/${i}-ca.key

  echo Sign ${i}-ca
  openssl ca \
    -config etc/root-ca.conf \
    -in ca/${i}-ca.csr \
    -out ca/${i}-ca.crt \
    -extensions signing_ca_ext

  echo Create CRL
  openssl ca -gencrl \
    -config etc/${i}-ca.conf \
    -out crl/${i}-ca.crl

  echo Create bundle
  cat ca/${i}-ca.crt ca/root-ca.crt > ca/${i}-ca-chain.pem
done
